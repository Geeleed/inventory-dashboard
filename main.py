import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

st.title("Inventory Dashboard (Multi-Product per Day + Monthly EOQ Forecast)")

st.text("‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: Date | Product | Stock | Demand | Daily_Usage | Cost_per_Order | Holding_Cost")

st.markdown(
    """
    | ‡∏ü‡∏¥‡∏•‡∏î‡πå               | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢                              | ‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)                                       |
    | ------------------ | ------------------------------------- | --------------------------------------------------- |
    | **Date**           | ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£                          | YYYY-MM-DD ‡πÄ‡∏ä‡πà‡∏ô 2025-01-01                         |
    | **Product**        | ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤                         | ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢ (text)                                  |
    | **Stock**          | ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠                      | ‡∏ä‡∏¥‡πâ‡∏ô                                                |    
    | **Demand**         | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô              | ‡∏ä‡∏¥‡πâ‡∏ô/‡∏ß‡∏±‡∏ô                                            |
    | **Daily_Usage**    | ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ç‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô                    | ‡∏ä‡∏¥‡πâ‡∏ô/‡∏ß‡∏±‡∏ô                                           |
    | **Cost_per_Order** | ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á                  | ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏£‡∏±‡πâ‡∏á                                         |
    | **Holding_Cost**   | ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡∏õ‡∏µ          | ‡∏ö‡∏≤‡∏ó/‡∏ä‡∏¥‡πâ‡∏ô/‡∏õ‡∏µ                                       |
    """
)

uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏£‡∏∑‡∏≠ CSV", type=["csv", "xlsx"])

if uploaded_file is not None:
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)

        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
        st.dataframe(df)

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        for col in ["Stock", "Demand", "Daily_Usage", "Cost_per_Order", "Holding_Cost"]:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors="coerce")

        # -------------------------------
        # Inventory Status (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠ Product)
        # -------------------------------
        if {"Product", "Stock"}.issubset(df.columns):
            st.subheader("üì¶ Inventory Status (Stock ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)")
            latest_stock = df.sort_values("Date").groupby("Product").last().reset_index()
            st.dataframe(latest_stock[["Product", "Stock"]])
            fig_stock = px.bar(latest_stock, x="Product", y="Stock", title="Stock ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
            st.plotly_chart(fig_stock, use_container_width=True)

        # -------------------------------
        # EOQ Calculation per Product + Days to Stock Out
        # -------------------------------
        required_cols = {"Product", "Stock", "Daily_Usage", "Cost_per_Order", "Holding_Cost"}
        if required_cols.issubset(df.columns):
            st.subheader("üìê EOQ per Product & Stock-out Forecast")

            grouped = df.groupby("Product").agg({
                "Stock": "min",           # Stock ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                "Daily_Usage": "mean",     # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Daily_Usage ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                "Cost_per_Order": "mean",
                "Holding_Cost": "mean"
            }).reset_index()

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Annual Demand
            grouped["Annual_Demand"] = grouped["Daily_Usage"] * 365

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EOQ
            grouped["EOQ"] = np.sqrt(2 * grouped["Annual_Demand"] * grouped["Cost_per_Order"] / grouped["Holding_Cost"])
            grouped["EOQ"] = grouped["EOQ"].round()

            # Days to Stockout
            grouped["Days_to_Stockout"] = np.where(grouped["Daily_Usage"] > 0,
                                                   (grouped["Stock"] / grouped["Daily_Usage"]).round(1),
                                                   np.inf)

            st.dataframe(grouped[["Product", "Stock", "EOQ", "Days_to_Stockout"]])

            # ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Stock vs EOQ
            fig_eoq = px.bar(grouped, x="Product", y=["Stock", "EOQ"],
                             barmode='group', title="‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Stock ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡∏±‡∏ö EOQ")
            st.plotly_chart(fig_eoq, use_container_width=True)

            # -------------------------------
            # Alert: Stock ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ EOQ ‡πÅ‡∏•‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î
            # -------------------------------
            st.subheader("‚ö†Ô∏è Stock-out Alert")
            for _, row in grouped.iterrows():
                msg = f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {row['Product']} ‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÉ‡∏ô {row['Days_to_Stockout']} ‡∏ß‡∏±‡∏ô"
                if row["Stock"] < row["EOQ"]:
                    st.error(msg + " ‚ö†Ô∏è ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ EOQ! ‡∏Ñ‡∏ß‡∏£‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°")
                elif row["Days_to_Stockout"] <= 7:
                    st.warning(msg + " ‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î")
                else:
                    st.success(msg + " ‚úÖ ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")

            # -------------------------------
            # Monthly EOQ Forecast (2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
            # -------------------------------
            months_forecast = 2
            forecast_data = []

            for _, row in grouped.iterrows():
                stock = row["Stock"]
                monthly_usage = row["Daily_Usage"] * 30
                eoq = row["EOQ"]
                for month in range(1, months_forecast + 1):
                    stock -= monthly_usage
                    alert = ""
                    if stock < eoq:
                        alert = "‚ö†Ô∏è ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ EOQ! ‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°"
                        stock += eoq  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á EOQ ‡πÄ‡∏û‡∏¥‡πà‡∏°
                    elif stock <= monthly_usage:
                        alert = "‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î"
                    forecast_data.append({
                        "Product": row["Product"],
                        "Month": month,
                        "Forecast_Stock": round(stock, 1),
                        "EOQ": eoq,
                        "Alert": alert
                    })

            forecast_df = pd.DataFrame(forecast_data)
            st.subheader("üìä Monthly EOQ Forecast")
            st.dataframe(forecast_df)
